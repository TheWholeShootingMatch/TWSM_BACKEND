#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('twsm-backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

const mongoose = require('mongoose');
var TCTs = require('../models/tcts');

 const NEW_SELECT_EVENT = "newSelect";

 const io = require("socket.io")(server, {
   cors: {
     origin: "*",
   },
 });

 io.on("connection", (socket) => {

   // Join a conversation
   const { roomId } = socket.handshake.query;
   socket.join(roomId);

   // Listen for new messages
   socket.on(NEW_SELECT_EVENT, (data) => {
     const tctnum = new mongoose.Types.ObjectId("600e4e20cfd1ee389c8c3fd0");

     let update = {
       $addToSet: {models : data.body}
     };

     if (data.func === 'D') {
       update = {
         $pull: {models : data.body}
       };
     }

     TCTs.findOneAndUpdate(
       { _id:tctnum },
       update,
       err => {
         if (err) throw err;
       }
     );

     io.in(roomId).emit(NEW_SELECT_EVENT, data);
   });

   // Leave the room if the user closes the socket
   socket.on("disconnect", () => {
     socket.leave(roomId);
   });
 });

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
